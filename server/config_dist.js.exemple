//
// Copy this file, rename it as config.js and add you own configuration
//

// Check if we are in production or development environement
if (process.env.NODE_ENV && process.env.NODE_ENV == 'production') {
	Meteor.settings.AWSAccessKeyId = "YOURKEY";
	Meteor.settings.AWSSecretAccessKey = "YOURKEY";
	Meteor.settings.bucket = "bucket-name";
	Meteor.settings.region = "eu-central-1";
}
else {
	Meteor.settings.AWSAccessKeyId = "YOURKEY";
	Meteor.settings.AWSSecretAccessKey = "YOURKEY";
	Meteor.settings.bucket = "bucket-name";
	Meteor.settings.region = "eu-central-1";
}

Meteor.fs = Npm.require('fs');

Meteor.startup(function () {
	/**
	 * AWS S3 configuration
	 */
	AWS.config.update({
		accessKeyId: Meteor.settings.AWSAccessKeyId,
		secretAccessKey: Meteor.settings.AWSSecretAccessKey,
		region: Meteor.settings.region // Like "eu-central-1"
	});
	s3 = new AWS.S3({params: {Bucket: Meteor.settings.bucket}});

	/**
	 * Customize the password reset system
	 */
	Accounts.emailTemplates.resetPassword.text = function (user, url) {
		url = url.replace('#/', ''); // Remove the # from the url.
		// Customize the email template
		return "Hello,\n\nTo reset your password, simply click the link below:\n\n"+ url +"\n\nThanks.";
	};
	
	/** 
	 * Transactional email configuration.
	 * You can use the Mandrill service or Mailgun for exemple
	 * @doc: http://blog.ploki.info/send-email-with-meteor-mailgun/
	 * @doc: http://docs.meteor.com/#/full/email
	 * UsernameOrEmail should be URL enconde. Ex.: test@mapker.co => test%40mapker.co
	 */
	Accounts.emailTemplates.from = 'Mapker <no-reply@mapker.co>';
	process.env.MAIL_URL = 'smtp://UsernameOrEmail:YOURKEY@smtp.mandrillapp.com:587';

	/**
	 * Loggly setup
	 * @see https://www.loggly.com/blog/managing-a-meteor-application-in-production-three-real-log-management-use-cases/
	 */
	Logger = new Loggly({
    token: 'YOURKEY',
    subdomain: 'YOURSUBMODAIN.loggly.com',
    auth: {
      username: 'YOURUSERNAME',
      password: 'YOURPASSWORD'
    },
    //
    // Optional: Tag to send with EVERY log message
    //
    tags: ['global-tag'],
    // Optional: logs will be stored in JSON format
    json: true
  });
  // From the server side, use this syntax:
  // Logger.log('first log from meteor');

  // To send log messages from the client
  Meteor.methods({
  	clientLog: function(message) { 
      Logger.log(message, ['meteorClient']); 
  	}
  	// From the client side, use something like
  	// Meteor.call('clientLog', 'this is a test');
  });
});